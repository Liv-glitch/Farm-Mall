version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agriculture-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agriculture_db
      POSTGRES_USER: agriculture_user
      POSTGRES_PASSWORD: agriculture_pass123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agriculture-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agriculture_user -d agriculture_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agriculture-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - agriculture-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agriculture API Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: agriculture-api
    restart: unless-stopped
     env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agriculture-network
    command: npm run dev

  # Agriculture API Production
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agriculture-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://agriculture_user:agriculture_pass123@postgres:5432/agriculture_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BCRYPT_SALT_ROUNDS: 12
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agriculture-network
    profiles:
      - production

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: agriculture-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - uploads:/var/www/uploads
    depends_on:
      - app-prod
    networks:
      - agriculture-network
    profiles:
      - production

  # Database Migration Service
  migrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: agriculture-migrator
    environment:
      DATABASE_URL: postgresql://agriculture_user:agriculture_pass123@postgres:5432/agriculture_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agriculture-network
    command: npm run migrate
    profiles:
      - migrate

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  agriculture-network:
    driver: bridge 